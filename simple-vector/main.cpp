#include <cassert>
#include <iostream>
#include <numeric>

#include "simple_vector.h"
// Tests
#include "tests.h"

using namespace std;

/*
Задание
Улучшите свой вектор, добавив возможность перемещения.
Используйте предлагаемые тесты и допишите свои, чтобы удостовериться,
что все нужные методы поддерживают не только копирование, но и перемещение.
Используйте знания, полученные в последних уроках, и разберитесь,
какие методы добавить в уже существующие классы, чтобы поддержать возможность перемещения.
--Подсказка
Следуйте за ошибками компиляции. Они выведут вас на верную дорогу.
*/


/*
Задание
Reserve задает ёмкость вектора. Этот метод повышает эффективность кода в случае,
когда пользователь заранее знает хотя бы приблизительное количество элементов в векторе.
Reserve сразу выделяет нужное количество памяти.
При добавлении новых элементов в вектор копирование будет происходить или значительно реже или совсем не будет.
Если new_capacity больше текущей capacity, память должна быть перевыделена,
а элементы вектора скопированы в новый отрезок памяти.
Кроме этого реализуйте возможность вызвать конструктор SimpleVector,
который будет сразу резервировать нужное количество памяти.
--Подсказка
Не забудьте обновить указатель на начало вектора и текущую ёмкость.
Для реализации конструктора с резервированием вам понадобится дополнительный класс-обёртка,
чтобы компилятор мог разобраться и вызвать правильный конструктор.
Этот конструктор должен принимать по значению объект этого класса-обёртки.
Тогда функция (не метод!) будет иметь следующую сигнатуру:
ReserveProxyObj Reserve(size_t capacity_to_reserve) {
    return ReserveProxyObj(capacity_to_reserve);
};
*/

int main() {

    SetTest1();
    SetTest2();
    std::cout << "< OLD TESTS 1 > -OK-" << std::endl << std::endl;
    TestReserveConstructor();
    TestReserveMethod();
    std::cout << "< OLD TESTS 2 > -OK-" << std::endl << std::endl;

    TestTemporaryObjConstructor();
    TestTemporaryObjOperator();
    TestNamedMoveConstructor();
    TestNamedMoveOperator();
    TestNoncopiableMoveConstructor();
    TestNoncopiablePushBack();

    TestNoncopiableInsert();

    TestNoncopiableErase();
    std::cout << "< NEW TESTS > -OK-" << std::endl << std::endl;

    return 0;
}
